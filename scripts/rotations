#!/usr/bin/env python3

import numpy as np
import spatialmath as sm

expected = sm.SO3.RPY((np.pi/2-0.001, 0, np.pi)).R
#expected = np.array([[-1.0, -0.006, -0.003],
# [-0.006,  1.0, 0.005],
# [ 0.003,  0.005, -1.0 ]])

actual = sm.SO3.RPY((np.pi/2 - 0.001, 0, np.pi)).R
#np.array([[-1.0, -0.016, -0.003],
# [-0.016,  1.0, -0.005],
# [ 0.003, -0.005, -1.0]])

# e = sm.SO3(np.linalg.pinv(actual) @ expected, check=False)

# print(e.rpy())

# e = sm.SO3(expected @ np.linalg.pinv(actual), check=False)

# print(e.rpy())

# e = sm.SO3(np.linalg.pinv(expected) @ actual, check=False)

# print(e.rpy())

# e = sm.SO3(actual @ np.linalg.pinv(expected), check=False)

# print(e.rpy())

expected = sm.SO3.RPY((np.pi - 0.001, 0, 0)).R
added = sm.SO3.RPY((0, 0, 0.01)).R


# summed = sm.SO3(expected @ added, check=False)
# print(summed.rpy())

summed = sm.SO3((sm.UnitQuaternion(expected) @ sm.UnitQuaternion(added)).R)

print(summed.rpy())

expected = sm.SO3.RPY((-np.pi - 0.001, 0, 0)).R
added = sm.SO3.RPY((0, 0, 0.01)).R

summed = sm.SO3((sm.UnitQuaternion(expected) @ sm.UnitQuaternion(added)).R)

print(summed.rpy())
